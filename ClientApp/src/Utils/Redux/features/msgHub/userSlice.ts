
import { createSlice } from '@reduxjs/toolkit';

import { RootState } from '../../store';


export interface UserState {
  userName: string | undefined,
  userStatus: 'Online' | 'Offline' | 'Pending';
}

const initialState: UserState = {
  userName: undefined,
  userStatus: 'Offline',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.


export const userState = createSlice({
  name: 'userState',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setUserStatus: (state, action) => {
      state.userStatus = action.payload;
    },
    setUserName: (state, action) => {
      state.userName = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.

});

export const { setUserName, setUserStatus } = userState.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.smartHut.value)`
export const selectUserName = (state: RootState) => state.userStatusReducer.userName
export const selectUserStatus = (state: RootState) => state.userStatusReducer.userStatus



export default userState.reducer;
