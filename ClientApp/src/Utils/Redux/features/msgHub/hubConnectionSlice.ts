
import { createAsyncThunk, createReducer, createSlice, PayloadAction } from '@reduxjs/toolkit';

import { RootState } from '../../store';



export interface ConnectionState {
  connectionId: string | undefined;
  connectionStatus: "open" | "closed"

}

const initialState: ConnectionState = {
  connectionId: undefined,
  connectionStatus: "closed",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.


export const hubConnectionState = createSlice({
  name: 'hubConnectionState',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setHubConnectionId: (state, action) => {
      state.connectionId = action.payload;
    },
    setHubConnectionStatus: (state, action) => {
      state.connectionStatus = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.

});

export const { setHubConnectionStatus, setHubConnectionId } = hubConnectionState.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.smartHut.value)`
export const selectHubConnectionId = (state: RootState) => state.hubConnectionReducer.connectionId
export const selectHubConnectionStatus = (state: RootState) => state.hubConnectionReducer.connectionStatus



export default hubConnectionState.reducer;
