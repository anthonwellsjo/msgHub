import { AccountInfo } from '@azure/msal-common';
import { createAsyncThunk, createReducer, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { SmartHut } from '../../../../types';
import { createRoomObjectsWithSensorData } from '../../../createDataModels';
import { RootState } from '../../store';

import { getBuildingAndDevices } from './smartHutApi';

export interface SmartHutState {
  sensorData: SmartHut.getBuildingAndDevicesData | null;
  status: 'idle' | 'loading' | 'failed';
  locations: SmartHut.Locations | null;
  account: AccountInfo | null;
}

const initialState: SmartHutState = {
  sensorData: null,
  status: 'idle',
  locations: null,
  account: null
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.


export const getInitialData = createAsyncThunk(
  'smartHut/getInitialData',
  async () => {
    const response = await getBuildingAndDevices("55350997-9be4-4746-b94d-3b9fad7ea795");
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const smartHut = createSlice({
  name: 'smartHut',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    mapLocations: (state) => {
      if (state.sensorData) {
        state.locations = createRoomObjectsWithSensorData(state.sensorData.devices)
      }
    },
    setAccount: (state, action) => {
      if (!state.account) {
        state.account = action.payload;
      }
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getInitialData.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getInitialData.fulfilled, (state, action) => {
        state.status = 'idle';
        state.sensorData = action.payload;
      });
  },
});

export const { mapLocations, setAccount } = smartHut.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.smartHut.value)`
export const selectSensorData = (state: RootState) => state.smarthut.sensorData;
export const selectDataFetchStatus = (state: RootState) => state.smarthut.status;
export const selectAccount = (state: RootState) => state.smarthut.account;



export default smartHut.reducer;
